(define (stream fetch-basic)
    (:stream sample-conf
        :inputs (?x)
        :domain (Any ?x)
        :outputs (?q)
        :certified (Conf ?q)
    )
    (:stream sample-grasp
        :inputs (?o)
        :domain (Obj ?o)
        :outputs (?g)
        :certified (and (Grasp ?g) (GraspForObj ?o ?g))
    )
    (:stream is-surface
        :inputs (?s)
        :domain (Obj ?s)
        :certified (Surface ?s)
    )
    (:stream sample-placement
        :inputs (?o ?s)
        :domain (and (Movable ?o) (Surface ?s))
        :outputs (?p)
        :certified (and (Pose ?p) (Placement ?p ?o ?s))
    )
    (:stream motion-plan
        :inputs (?q1 ?q2)
        :domain (and (Conf ?q1) (Conf ?q2))
        :outputs (?path)
        :certified (and (Path ?path) (ValidPath ?path ?q1 ?q2))
    )
    (:stream motion-plan-carry
        :inputs (?q1 ?q2 ?o ?g)
        :domain (and (Conf ?q1) (Conf ?q2) (Obj ?o) (Grasp ?g) 
                    (GraspForObj ?o ?g) (Movable ?o))
        :outputs (?path)
        :certified (and (Path ?path) (ValidPath ?path ?q1 ?q2) (ValidCarry ?path ?o ?g))
    )
    ; (:stream motion-plan-grasp-and-carry
    ;     :inputs (?q1 ?q2 ?o)
    ;     :domain (and (Conf ?q1) (Conf ?q2) (Obj ?o) (Movable ?o))
    ;     :outputs (?g ?path)
    ;     :certified (and (Grasp ?g) (Path ?path) 
    ;                     (GraspForObj ?o ?g) 
    ;                     (ValidPath ?path) 
    ;                     (ValidCarry ?path ?o ?g))
    ; )
)
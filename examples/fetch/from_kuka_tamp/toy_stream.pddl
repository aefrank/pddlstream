(define (stream fetch-basic)
    (:stream sample-conf
        :inputs (?x)
        :domain (Any ?x)
        :outputs (?q)
        :certified (Conf ?q)
    )
    (:stream sample-grasp
        :inputs (?o)
        :domain (Movable ?o)
        :outputs (?g ?gp ?ap)
        :certified (and (Grasp ?g) (Pose ?gp) (Pose ?ap) (GraspInfo ?g ?o ?ap ?gp))
    )
    (:stream forward-kinematics
        :inputs (?q)
        :domain (Conf ?q)
        :outputs (?p)
        :certified (and (Pose ?p) (FK ?q ?p))
    )
    (:stream inverse-kinematics
        :inputs (?p)
        :domain (Pose ?p)
        :outputs (?q)
        :certified (and (Conf ?q) (FK ?q ?p))
    )
    (:stream is-surface
        :inputs (?s)
        :domain (Obj ?s)
        :certified (Surface ?s)
    )
    (:stream sample-placement
        :inputs (?o ?s)
        :domain (and (Movable ?o) (Surface ?s))
        :outputs (?p)
        :certified (and (Pose ?p) (Placement ?p ?o ?s))
    )
    (:stream motion-plan
        :inputs (?q1 ?q2)
        :domain (and (Conf ?q1) (Conf ?q2))
        :outputs (?path)
        :certified (and (Path ?path) (PathInfo ?path ?q1 ?q2) (CollisionFree ?path))
    )
    (:stream grasp-command
        :inputs (?o ?g)
        :domain (and (Obj ?o) (Grasp ?g))
        :outputs (?q ?cmd)
        :certified (and (Conf ?q) (Command ?cmd) (GraspCommand ?cmd ?g) (CommandStartConf ?q ?cmd) (CommandEndConf ?q ?cmd))
    )
    ; (:stream motion-plan-carry
    ;     :inputs (?q1 ?q2 ?o ?g)
    ;     :domain (and (Conf ?q1) (Conf ?q2) (Obj ?o) (Grasp ?g) 
    ;                 (GraspForObj ?o ?g) (Movable ?o))
    ;     :outputs (?path)
    ;     :certified (and (Path ?path) (AvailablePath ?path ?q1 ?q2) (AvailableCarry ?path ?o ?g))
    ; )
    ; (:stream motion-plan-grasp-and-carry
    ;     :inputs (?q1 ?q2 ?o)
    ;     :domain (and (Conf ?q1) (Conf ?q2) (Obj ?o) (Movable ?o))
    ;     :outputs (?g ?path)
    ;     :certified (and (Grasp ?g) (Path ?path) 
    ;                     (GraspForObj ?o ?g) 
    ;                     (AvailablePath ?path) 
    ;                     (AvailableCarry ?path ?o ?g))
    ; )
)